<!DOCTYPE html>
<!-- This is based on DillingerLee's great template here:
https://github.com/Team-Code/KA_Offline -->
<html> 
 <head>
    <title>Fourier Animation</title> 
</head>
 <body>
    <p align="center"> 
	<!--This draws the Canvas on the webpage -->
      <canvas id="mycanvas"></canvas> 
    </p>
 </body>
 
 <!-- Run all the JavaScript stuff -->
 <!-- Include the processing.js library -->
 <!-- See https://khanacademy.zendesk.com/hc/en-us/articles/202260404-What-parts-of-ProcessingJS-does-Khan-Academy-support- for differences -->
 <script src="https://cdn.jsdelivr.net/processing.js/1.4.8/processing.min.js"></script> 
 
 <script>
    var sketchProc = function(processingInstance) {
     with (processingInstance) {
        size(1200, 600); 
        frameRate(60);
        
//Made by Shivum Banerjee, 17 Jan 2021     
//click to place points, press the spacebar to begin the animation, and press 'r' to clear it
	     
angleMode = "radians";

scale(1,-1);
translate(600,-300);

background(0,255,255,100);
strokeWeight(0.5);
stroke(0, 0, 0);
for(var i = -600; i < 600; i += 20) {
    line(i,-600,i,600);
    line(-600,i,600,i);
}

strokeWeight(3);
line(-600,0,600,0);
line(0,-600,0,600);

var comNum = function(a,b) {
    this.a = a;
    this.b = b;
    this.arg = atan(b/a);
    this.mod = sqrt(sq(a) + sq(b));
};

comNum.prototype.add = function(num) {
    this.a += num.a;
    this.b += num.b;
    
    this.mod = sqrt(sq(this.a) + sq(this.b));
    if(this.a !== 0) {
        this.arg = atan(this.b/this.a);
    } else {
        if(this.b > 0) {
            this.arg = Math.PI/2;
        } else if(this.b < 0) {
            this.arg = -Math.PI/2;
        }
    }
    
    return this;
};

comNum.prototype.sub = function(num) {
    this.a -= num.a;
    this.b -= num.b;
    
    this.mod = sqrt(sq(this.a) + sq(this.b));
    if(this.a !== 0) {
        this.arg = atan(this.b/this.a);
    } else {
        if(this.b > 0) {
            this.arg = Math.PI/2;
        } else if(this.b < 0) {
            this.arg = -Math.PI/2;
        }
    }
    
    return this;
};

comNum.prototype.mult = function(num) {
    var tempA = this.a*num.a - this.b*num.b;
    var tempB = this.b*num.a + this.a*num.b;
    
    this.a = tempA;
    this.b = tempB;

    this.mod = sqrt(sq(this.a) + sq(this.b));
    if(this.a !== 0) {
        this.arg = atan(this.b/this.a);
    } else {
        if(this.b > 0) {
            this.arg = Math.PI/2;
        } else if(this.b < 0) {
            this.arg = -Math.PI/2;
        }
    }

    return this;
};

comNum.prototype.div = function(num) {
    var tempA = (this.a*num.a + this.b*num.b)/(sq(num.a)+sq(num.b));
    var tempB = (this.b*num.a - this.a*num.b)/(sq(num.a)+sq(num.b));
    
    this.a = tempA;
    this.b = tempB;
    
    this.mod = sqrt(sq(this.a)+sq(this.b));
    if(this.a !== 0) {
        this.arg = atan(this.b/this.a);
    } else {
        if(this.b > 0) {
            this.arg = Math.PI/2;
        } else if(this.b < 0) {
            this.arg = -Math.PI/2;
        }
    }
    
    return new comNum(this.a,this.b);
};

comNum.prototype.pow = function(num) {

    //does re^(ix)^(a+bi)
    var tempM = this.mod;

   this.mod = exp(num.a*log(tempM) - num.b*this.arg);
   this.arg = num.b*log(tempM) + num.a*this.arg;
   
   this.a = this.mod*cos(this.arg);
   this.b = this.mod*sin(this.arg);
    
    return this;
};

comNum.prototype.set = function(num) {
    this.a = num.a;
    this.b = num.b;
    this.mod = num.mod;
    this.arg = num.arg;
    
    return this;
};

comNum.prototype.print = function(retrn) {
    var base = "";

    if(this.a !== 0) {
        base += this.a;
        
        if(this.b > 0) {
            base += " + ";   
        } else if(this.b < 0) {
            base += " - ";
        }
    }
    
    if(this.b === -1 || this.b === 1) {
        base += "i";   
    } else if(this.b !== 0) {
        base += abs(this.b) + "i";   
    }
    
    if(this.a === 0 && this.b === 0) {
        base = "0 + 0i";
    }
    
    if(retrn) {
        return base;   
    }
    
    println(base);
    
};

var DFS = function(points) {
    var L = points.length;
    
    var coeff = function(n) {
        var base = new comNum(0,0);
        
        for(var t = 0; t < L; t++) {
            var shift = new comNum(cos(-2*Math.PI*n*t/L),sin(-2*Math.PI*n*t/L));
            
            var clone = new comNum(points[t].a,points[t].b);
            
            base.add(clone.mult(shift));
        }
        
        return base;
    };
    
    var f = function(x) {
        var base = new comNum(0,0);
        
        for(var n = 0; n < L; n++) {
            
            var eX = new comNum(cos(2*Math.PI*n*x/L),sin(2*Math.PI*n*x/L));
            
            base.add(eX.mult(coeff(n).div(new comNum(L,0))));
        }
        
        return base;
    };
    
    return [f,coeff];
    
};

var FFT = function(x) {
    var n = x.length;

    if(n === 1) {
        return [x[0]];
    }
    if(n % 2 !== 0) {
        return [];
    }
    
    var even = [];
    for(var k = 0; k < n/2; k++) {
        even[k] = x[2*k];
    }
    var evenFFT = FFT(even);
    
    var odd = [];
    for(var k = 0; k < n/2; k ++) {
        odd[k] = x[2*k + 1];
    }
    var oddFFT = FFT(odd);
    
    var y = [];
    for(var k = 0; k < n/2; k++) {
        var arg = -2*k*Math.PI/n;
        var shift = new comNum(cos(arg),sin(arg));
        
        y[k] = evenFFT[k].add(oddFFT[k].mult(shift));
        y[k + n/2] = evenFFT[k].sub(oddFFT[k].mult(shift));
    }
    
    return y;
};
/*
var test = [];
for(var i = 0; i < 16; i++) {
    test.push(new comNum(cos(i),0));
}

var a = FFT(test);
a[0].print();
var b = DFS(test);

b[1](0).print();
*/
var points = [];
var srs = DFS(points);

var w = 0;
var speed = 0.01;
var unit = 1;
var play = false;
var history = [];

keyPressed = function() {
    
    if(keyCode === 82) {
        
        history.length = 0;
        play = false;
        points.length = 0;
        w = 0;
         
    } else if(keyCode === 32) {
        w = 0;
        history.length = 0;
        play = true;
    }
    
    srs = DFS(points);
};

mouseClicked = function() {
    
    if(!play) {
        var convX = (mouseX - 600)*unit/20;
        var convY = (300 - mouseY)*unit/20;
        points.push(new comNum(convX,convY));
    }
};

draw = function() {
    
    if(!play) {
        //graph
        background(0,255,255,100);
        strokeWeight(0.5);
        stroke(0, 0, 0);
        for(var i = -600; i < 600; i += 20) {
            line(i,-600,i,600);
            line(-600,i,600,i);
        }

        strokeWeight(3);
        line(-600,0,600,0);
        line(0,-300,0,300);
        
        strokeWeight(2);
        stroke(0);
        
        for(var i = 0; i < points.length; i++) {
            var diff = 255/points.length*i;
            fill(diff, 0, 255 - diff);
            ellipse(points[i].a*20/unit,points[i].b*20/unit,10,10);   
        }

    } else if(play && w < points.length) {
        //graph
        background(0,255,255,100);
        strokeWeight(0.5);
        stroke(0, 0, 0);
        for(var i = -600; i < 600; i += 20) {
            line(i,-600,i,600);
            line(-300,i,300,i);
        }

        strokeWeight(3);
        line(-600,0,600,0);
        line(0,-300,0,300);
    
        noStroke();
        w += speed;
        w = round(w/speed)*speed;
        
        //tip of fourier series
        history.push([srs[0](w).a*20/unit,srs[0](w).b*20/unit,w]);
        for(var i = 0; i < history.length; i++) {
            var diff = 255/points.length*history[i][2];
            fill(diff,0,255 - diff);
            ellipse(history[i][0],history[i][1],10,10);  
        }
        
        //vectors, target points, and circles
        var base = new comNum(0,0);
        for(var i = 0; i < points.length; i++) {
            var diff = 255/points.length * i;
            
            //target points
            fill(diff, 0, 255 - diff);
            strokeWeight(2);
            stroke(0);
            ellipse(points[i].a*20/unit,points[i].b*20/unit,10,10);
            
            //circles
            diff = 255/(points.length - 1)*i;
            noFill();
            strokeWeight(3);
            stroke(diff, 255 - diff, diff,100);
            var r = srs[1](i).mod/points.length;
            if(i > 0) {
                ellipse(base.a*20/unit,base.b*20/unit,r*2*20/unit,r*2*20/unit);
            }
            
            //vectors
            var point1 = new comNum(0,0).set(srs[1](i)).div(new comNum(points.length,0));
            
            var eX = new comNum(Math.E,0).pow(new comNum(0,2*Math.PI*i*w/points.length));
            point1.mult(eX);

            strokeWeight(3);
            stroke(diff, 255 - diff, diff);
            line(base.a*20/unit,base.b*20/unit,point1.a*20/unit + base.a*20/unit,point1.b*20/unit + base.b*20/unit);
            
            base.add(point1);
            
            //points along circumference
            stroke(0);
            strokeWeight(10);
            if(i < points.length - 1) {
                point(base.a*20/unit,base.b*20/unit);
            }
        }
    }
};


    }};

    // Get the canvas that Processing-js will use
    var canvas = document.getElementById("mycanvas"); 
    // Pass the function sketchProc (defined in myCode.js) to Processing's constructor.
    var processingInstance = new Processing(canvas, sketchProc); 
 </script>

</html>
